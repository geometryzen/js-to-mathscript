// TODO: JSX prevents us from refining the StatementType.
// May need to fold JSX into the base Syntax?
export type StatementType = string;
/*
export type StatementType =
    'AssignmentExpression' |
    'AssignmentPattern' |
    'ArrayExpression' |
    'ArrayPattern' |
    'ArrowFunctionExpression' |
    'AwaitExpression' |
    'BlockStatement' |
    'BinaryExpression' |
    'BreakStatement' |
    'CallExpression' |
    'CatchClause' |
    'ClassBody' |
    'ClassDeclaration' |
    'ClassExpression' |
    'ConditionalExpression' |
    'ContinueStatement' |
    'DoWhileStatement' |
    'DebuggerStatement' |
    'EmptyStatement' |
    'ExportAllDeclaration' |
    'ExportDefaultDeclaration' |
    'ExportNamedDeclaration' |
    'ExportSpecifier' |
    'ExpressionStatement' |
    'ForStatement' |
    'ForOfStatement' |
    'ForInStatement' |
    'FunctionDeclaration' |
    'FunctionExpression' |
    'Identifier' |
    'IfStatement' |
    'Import' |
    'ImportDeclaration' |
    'ImportDefaultSpecifier' |
    'ImportNamespaceSpecifier' |
    'ImportSpecifier' |
    'Literal' |
    'LabeledStatement' |
    'LogicalExpression' |
    'MemberExpression' |
    'MetaProperty' |
    'MethodDefinition' |
    'NewExpression' |
    'ObjectExpression' |
    'ObjectPattern' |
    'Program' |
    'Property' |
    'RestElement' |
    'RestProperty' |
    'ReturnStatement' |
    'SequenceExpression' |
    'SpreadElement' |
    'SpreadProperty' |
    'Super' |
    'SwitchCase' |
    'SwitchStatement' |
    'TaggedTemplateExpression' |
    'TemplateElement' |
    'TemplateLiteral' |
    'ThisExpression' |
    'ThrowStatement' |
    'TryStatement' |
    'UnaryExpression' |
    'UpdateExpression' |
    'VariableDeclaration' |
    'VariableDeclarator' |
    'WhileStatement' |
    'WithStatement' |
    'YieldExpression';
*/

export const Syntax: { [name: string]: StatementType } = {
    AssignmentExpression: 'AssignmentExpression',
    AssignmentPattern: 'AssignmentPattern',
    ArrayExpression: 'ArrayExpression',
    ArrayPattern: 'ArrayPattern',
    ArrowFunctionExpression: 'ArrowFunctionExpression',
    AwaitExpression: 'AwaitExpression',
    BlockStatement: 'BlockStatement',
    BinaryExpression: 'BinaryExpression',
    BreakStatement: 'BreakStatement',
    CallExpression: 'CallExpression',
    CatchClause: 'CatchClause',
    ClassBody: 'ClassBody',
    ClassDeclaration: 'ClassDeclaration',
    ClassExpression: 'ClassExpression',
    ConditionalExpression: 'ConditionalExpression',
    ContinueStatement: 'ContinueStatement',
    DoWhileStatement: 'DoWhileStatement',
    DebuggerStatement: 'DebuggerStatement',
    EmptyStatement: 'EmptyStatement',
    ExportAllDeclaration: 'ExportAllDeclaration',
    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
    ExportNamedDeclaration: 'ExportNamedDeclaration',
    ExportSpecifier: 'ExportSpecifier',
    ExpressionStatement: 'ExpressionStatement',
    ForStatement: 'ForStatement',
    ForOfStatement: 'ForOfStatement',
    ForInStatement: 'ForInStatement',
    FunctionDeclaration: 'FunctionDeclaration',
    FunctionExpression: 'FunctionExpression',
    Identifier: 'Identifier',
    IfStatement: 'IfStatement',
    Import: 'Import',
    ImportDeclaration: 'ImportDeclaration',
    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
    ImportSpecifier: 'ImportSpecifier',
    Literal: 'Literal',
    LabeledStatement: 'LabeledStatement',
    LogicalExpression: 'LogicalExpression',
    MemberExpression: 'MemberExpression',
    MetaProperty: 'MetaProperty',
    MethodDefinition: 'MethodDefinition',
    NewExpression: 'NewExpression',
    ObjectExpression: 'ObjectExpression',
    ObjectPattern: 'ObjectPattern',
    Program: 'Program',
    Property: 'Property',
    RestElement: 'RestElement',
    RestProperty: 'RestProperty',
    ReturnStatement: 'ReturnStatement',
    SequenceExpression: 'SequenceExpression',
    SpreadElement: 'SpreadElement',
    SpreadProperty: 'SpreadProperty',
    Super: 'Super',
    SwitchCase: 'SwitchCase',
    SwitchStatement: 'SwitchStatement',
    TaggedTemplateExpression: 'TaggedTemplateExpression',
    TemplateElement: 'TemplateElement',
    TemplateLiteral: 'TemplateLiteral',
    ThisExpression: 'ThisExpression',
    ThrowStatement: 'ThrowStatement',
    TryStatement: 'TryStatement',
    UnaryExpression: 'UnaryExpression',
    UpdateExpression: 'UpdateExpression',
    VariableDeclaration: 'VariableDeclaration',
    VariableDeclarator: 'VariableDeclarator',
    WhileStatement: 'WhileStatement',
    WithStatement: 'WithStatement',
    YieldExpression: 'YieldExpression',
};
